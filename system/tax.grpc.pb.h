// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tax.proto
#ifndef GRPC_tax_2eproto__INCLUDED
#define GRPC_tax_2eproto__INCLUDED

#include "tax.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace taxprro {

class ChkIncomeService final {
 public:
  static constexpr char const* service_full_name() {
    return "taxprro.ChkIncomeService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status sendChk(::grpc::ClientContext* context, const ::taxprro::Check& request, ::taxprro::CheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>> AsyncsendChk(::grpc::ClientContext* context, const ::taxprro::Check& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>>(AsyncsendChkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>> PrepareAsyncsendChk(::grpc::ClientContext* context, const ::taxprro::Check& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>>(PrepareAsyncsendChkRaw(context, request, cq));
    }
    virtual ::grpc::Status sendChkV2(::grpc::ClientContext* context, const ::taxprro::Check& request, ::taxprro::CheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>> AsyncsendChkV2(::grpc::ClientContext* context, const ::taxprro::Check& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>>(AsyncsendChkV2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>> PrepareAsyncsendChkV2(::grpc::ClientContext* context, const ::taxprro::Check& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>>(PrepareAsyncsendChkV2Raw(context, request, cq));
    }
    virtual ::grpc::Status lastChk(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::taxprro::CheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>> AsynclastChk(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>>(AsynclastChkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>> PrepareAsynclastChk(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>>(PrepareAsynclastChkRaw(context, request, cq));
    }
    virtual ::grpc::Status ping(::grpc::ClientContext* context, const ::taxprro::Check& request, ::taxprro::CheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>> Asyncping(::grpc::ClientContext* context, const ::taxprro::Check& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>>(AsyncpingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>> PrepareAsyncping(::grpc::ClientContext* context, const ::taxprro::Check& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>>(PrepareAsyncpingRaw(context, request, cq));
    }
    virtual ::grpc::Status delLastChk(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::taxprro::CheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>> AsyncdelLastChk(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>>(AsyncdelLastChkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>> PrepareAsyncdelLastChk(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>>(PrepareAsyncdelLastChkRaw(context, request, cq));
    }
    virtual ::grpc::Status delLastChkId(::grpc::ClientContext* context, const ::taxprro::CheckRequestId& request, ::taxprro::CheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>> AsyncdelLastChkId(::grpc::ClientContext* context, const ::taxprro::CheckRequestId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>>(AsyncdelLastChkIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>> PrepareAsyncdelLastChkId(::grpc::ClientContext* context, const ::taxprro::CheckRequestId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>>(PrepareAsyncdelLastChkIdRaw(context, request, cq));
    }
    virtual ::grpc::Status statusRro(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::taxprro::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::StatusResponse>> AsyncstatusRro(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::StatusResponse>>(AsyncstatusRroRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::StatusResponse>> PrepareAsyncstatusRro(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::StatusResponse>>(PrepareAsyncstatusRroRaw(context, request, cq));
    }
    virtual ::grpc::Status infoRro(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::taxprro::RroInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::RroInfoResponse>> AsyncinfoRro(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::RroInfoResponse>>(AsyncinfoRroRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::RroInfoResponse>> PrepareAsyncinfoRro(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::RroInfoResponse>>(PrepareAsyncinfoRroRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void sendChk(::grpc::ClientContext* context, const ::taxprro::Check* request, ::taxprro::CheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendChk(::grpc::ClientContext* context, const ::taxprro::Check* request, ::taxprro::CheckResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void sendChkV2(::grpc::ClientContext* context, const ::taxprro::Check* request, ::taxprro::CheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendChkV2(::grpc::ClientContext* context, const ::taxprro::Check* request, ::taxprro::CheckResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void lastChk(::grpc::ClientContext* context, const ::taxprro::CheckRequest* request, ::taxprro::CheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void lastChk(::grpc::ClientContext* context, const ::taxprro::CheckRequest* request, ::taxprro::CheckResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ping(::grpc::ClientContext* context, const ::taxprro::Check* request, ::taxprro::CheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ping(::grpc::ClientContext* context, const ::taxprro::Check* request, ::taxprro::CheckResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void delLastChk(::grpc::ClientContext* context, const ::taxprro::CheckRequest* request, ::taxprro::CheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void delLastChk(::grpc::ClientContext* context, const ::taxprro::CheckRequest* request, ::taxprro::CheckResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void delLastChkId(::grpc::ClientContext* context, const ::taxprro::CheckRequestId* request, ::taxprro::CheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void delLastChkId(::grpc::ClientContext* context, const ::taxprro::CheckRequestId* request, ::taxprro::CheckResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void statusRro(::grpc::ClientContext* context, const ::taxprro::CheckRequest* request, ::taxprro::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void statusRro(::grpc::ClientContext* context, const ::taxprro::CheckRequest* request, ::taxprro::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void infoRro(::grpc::ClientContext* context, const ::taxprro::CheckRequest* request, ::taxprro::RroInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void infoRro(::grpc::ClientContext* context, const ::taxprro::CheckRequest* request, ::taxprro::RroInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>* AsyncsendChkRaw(::grpc::ClientContext* context, const ::taxprro::Check& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>* PrepareAsyncsendChkRaw(::grpc::ClientContext* context, const ::taxprro::Check& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>* AsyncsendChkV2Raw(::grpc::ClientContext* context, const ::taxprro::Check& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>* PrepareAsyncsendChkV2Raw(::grpc::ClientContext* context, const ::taxprro::Check& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>* AsynclastChkRaw(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>* PrepareAsynclastChkRaw(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>* AsyncpingRaw(::grpc::ClientContext* context, const ::taxprro::Check& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>* PrepareAsyncpingRaw(::grpc::ClientContext* context, const ::taxprro::Check& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>* AsyncdelLastChkRaw(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>* PrepareAsyncdelLastChkRaw(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>* AsyncdelLastChkIdRaw(::grpc::ClientContext* context, const ::taxprro::CheckRequestId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::CheckResponse>* PrepareAsyncdelLastChkIdRaw(::grpc::ClientContext* context, const ::taxprro::CheckRequestId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::StatusResponse>* AsyncstatusRroRaw(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::StatusResponse>* PrepareAsyncstatusRroRaw(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::RroInfoResponse>* AsyncinfoRroRaw(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::taxprro::RroInfoResponse>* PrepareAsyncinfoRroRaw(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status sendChk(::grpc::ClientContext* context, const ::taxprro::Check& request, ::taxprro::CheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>> AsyncsendChk(::grpc::ClientContext* context, const ::taxprro::Check& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>>(AsyncsendChkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>> PrepareAsyncsendChk(::grpc::ClientContext* context, const ::taxprro::Check& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>>(PrepareAsyncsendChkRaw(context, request, cq));
    }
    ::grpc::Status sendChkV2(::grpc::ClientContext* context, const ::taxprro::Check& request, ::taxprro::CheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>> AsyncsendChkV2(::grpc::ClientContext* context, const ::taxprro::Check& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>>(AsyncsendChkV2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>> PrepareAsyncsendChkV2(::grpc::ClientContext* context, const ::taxprro::Check& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>>(PrepareAsyncsendChkV2Raw(context, request, cq));
    }
    ::grpc::Status lastChk(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::taxprro::CheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>> AsynclastChk(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>>(AsynclastChkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>> PrepareAsynclastChk(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>>(PrepareAsynclastChkRaw(context, request, cq));
    }
    ::grpc::Status ping(::grpc::ClientContext* context, const ::taxprro::Check& request, ::taxprro::CheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>> Asyncping(::grpc::ClientContext* context, const ::taxprro::Check& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>>(AsyncpingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>> PrepareAsyncping(::grpc::ClientContext* context, const ::taxprro::Check& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>>(PrepareAsyncpingRaw(context, request, cq));
    }
    ::grpc::Status delLastChk(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::taxprro::CheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>> AsyncdelLastChk(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>>(AsyncdelLastChkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>> PrepareAsyncdelLastChk(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>>(PrepareAsyncdelLastChkRaw(context, request, cq));
    }
    ::grpc::Status delLastChkId(::grpc::ClientContext* context, const ::taxprro::CheckRequestId& request, ::taxprro::CheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>> AsyncdelLastChkId(::grpc::ClientContext* context, const ::taxprro::CheckRequestId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>>(AsyncdelLastChkIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>> PrepareAsyncdelLastChkId(::grpc::ClientContext* context, const ::taxprro::CheckRequestId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>>(PrepareAsyncdelLastChkIdRaw(context, request, cq));
    }
    ::grpc::Status statusRro(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::taxprro::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::StatusResponse>> AsyncstatusRro(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::StatusResponse>>(AsyncstatusRroRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::StatusResponse>> PrepareAsyncstatusRro(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::StatusResponse>>(PrepareAsyncstatusRroRaw(context, request, cq));
    }
    ::grpc::Status infoRro(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::taxprro::RroInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::RroInfoResponse>> AsyncinfoRro(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::RroInfoResponse>>(AsyncinfoRroRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::RroInfoResponse>> PrepareAsyncinfoRro(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::taxprro::RroInfoResponse>>(PrepareAsyncinfoRroRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void sendChk(::grpc::ClientContext* context, const ::taxprro::Check* request, ::taxprro::CheckResponse* response, std::function<void(::grpc::Status)>) override;
      void sendChk(::grpc::ClientContext* context, const ::taxprro::Check* request, ::taxprro::CheckResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void sendChkV2(::grpc::ClientContext* context, const ::taxprro::Check* request, ::taxprro::CheckResponse* response, std::function<void(::grpc::Status)>) override;
      void sendChkV2(::grpc::ClientContext* context, const ::taxprro::Check* request, ::taxprro::CheckResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void lastChk(::grpc::ClientContext* context, const ::taxprro::CheckRequest* request, ::taxprro::CheckResponse* response, std::function<void(::grpc::Status)>) override;
      void lastChk(::grpc::ClientContext* context, const ::taxprro::CheckRequest* request, ::taxprro::CheckResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ping(::grpc::ClientContext* context, const ::taxprro::Check* request, ::taxprro::CheckResponse* response, std::function<void(::grpc::Status)>) override;
      void ping(::grpc::ClientContext* context, const ::taxprro::Check* request, ::taxprro::CheckResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void delLastChk(::grpc::ClientContext* context, const ::taxprro::CheckRequest* request, ::taxprro::CheckResponse* response, std::function<void(::grpc::Status)>) override;
      void delLastChk(::grpc::ClientContext* context, const ::taxprro::CheckRequest* request, ::taxprro::CheckResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void delLastChkId(::grpc::ClientContext* context, const ::taxprro::CheckRequestId* request, ::taxprro::CheckResponse* response, std::function<void(::grpc::Status)>) override;
      void delLastChkId(::grpc::ClientContext* context, const ::taxprro::CheckRequestId* request, ::taxprro::CheckResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void statusRro(::grpc::ClientContext* context, const ::taxprro::CheckRequest* request, ::taxprro::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void statusRro(::grpc::ClientContext* context, const ::taxprro::CheckRequest* request, ::taxprro::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void infoRro(::grpc::ClientContext* context, const ::taxprro::CheckRequest* request, ::taxprro::RroInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void infoRro(::grpc::ClientContext* context, const ::taxprro::CheckRequest* request, ::taxprro::RroInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>* AsyncsendChkRaw(::grpc::ClientContext* context, const ::taxprro::Check& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>* PrepareAsyncsendChkRaw(::grpc::ClientContext* context, const ::taxprro::Check& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>* AsyncsendChkV2Raw(::grpc::ClientContext* context, const ::taxprro::Check& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>* PrepareAsyncsendChkV2Raw(::grpc::ClientContext* context, const ::taxprro::Check& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>* AsynclastChkRaw(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>* PrepareAsynclastChkRaw(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>* AsyncpingRaw(::grpc::ClientContext* context, const ::taxprro::Check& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>* PrepareAsyncpingRaw(::grpc::ClientContext* context, const ::taxprro::Check& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>* AsyncdelLastChkRaw(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>* PrepareAsyncdelLastChkRaw(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>* AsyncdelLastChkIdRaw(::grpc::ClientContext* context, const ::taxprro::CheckRequestId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::taxprro::CheckResponse>* PrepareAsyncdelLastChkIdRaw(::grpc::ClientContext* context, const ::taxprro::CheckRequestId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::taxprro::StatusResponse>* AsyncstatusRroRaw(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::taxprro::StatusResponse>* PrepareAsyncstatusRroRaw(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::taxprro::RroInfoResponse>* AsyncinfoRroRaw(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::taxprro::RroInfoResponse>* PrepareAsyncinfoRroRaw(::grpc::ClientContext* context, const ::taxprro::CheckRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_sendChk_;
    const ::grpc::internal::RpcMethod rpcmethod_sendChkV2_;
    const ::grpc::internal::RpcMethod rpcmethod_lastChk_;
    const ::grpc::internal::RpcMethod rpcmethod_ping_;
    const ::grpc::internal::RpcMethod rpcmethod_delLastChk_;
    const ::grpc::internal::RpcMethod rpcmethod_delLastChkId_;
    const ::grpc::internal::RpcMethod rpcmethod_statusRro_;
    const ::grpc::internal::RpcMethod rpcmethod_infoRro_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status sendChk(::grpc::ServerContext* context, const ::taxprro::Check* request, ::taxprro::CheckResponse* response);
    virtual ::grpc::Status sendChkV2(::grpc::ServerContext* context, const ::taxprro::Check* request, ::taxprro::CheckResponse* response);
    virtual ::grpc::Status lastChk(::grpc::ServerContext* context, const ::taxprro::CheckRequest* request, ::taxprro::CheckResponse* response);
    virtual ::grpc::Status ping(::grpc::ServerContext* context, const ::taxprro::Check* request, ::taxprro::CheckResponse* response);
    virtual ::grpc::Status delLastChk(::grpc::ServerContext* context, const ::taxprro::CheckRequest* request, ::taxprro::CheckResponse* response);
    virtual ::grpc::Status delLastChkId(::grpc::ServerContext* context, const ::taxprro::CheckRequestId* request, ::taxprro::CheckResponse* response);
    virtual ::grpc::Status statusRro(::grpc::ServerContext* context, const ::taxprro::CheckRequest* request, ::taxprro::StatusResponse* response);
    virtual ::grpc::Status infoRro(::grpc::ServerContext* context, const ::taxprro::CheckRequest* request, ::taxprro::RroInfoResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_sendChk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sendChk() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_sendChk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendChk(::grpc::ServerContext* /*context*/, const ::taxprro::Check* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendChk(::grpc::ServerContext* context, ::taxprro::Check* request, ::grpc::ServerAsyncResponseWriter< ::taxprro::CheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sendChkV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sendChkV2() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_sendChkV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendChkV2(::grpc::ServerContext* /*context*/, const ::taxprro::Check* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendChkV2(::grpc::ServerContext* context, ::taxprro::Check* request, ::grpc::ServerAsyncResponseWriter< ::taxprro::CheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_lastChk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_lastChk() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_lastChk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status lastChk(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlastChk(::grpc::ServerContext* context, ::taxprro::CheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::taxprro::CheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ping() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ping(::grpc::ServerContext* /*context*/, const ::taxprro::Check* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestping(::grpc::ServerContext* context, ::taxprro::Check* request, ::grpc::ServerAsyncResponseWriter< ::taxprro::CheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_delLastChk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_delLastChk() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_delLastChk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status delLastChk(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdelLastChk(::grpc::ServerContext* context, ::taxprro::CheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::taxprro::CheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_delLastChkId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_delLastChkId() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_delLastChkId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status delLastChkId(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequestId* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdelLastChkId(::grpc::ServerContext* context, ::taxprro::CheckRequestId* request, ::grpc::ServerAsyncResponseWriter< ::taxprro::CheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_statusRro : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_statusRro() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_statusRro() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status statusRro(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststatusRro(::grpc::ServerContext* context, ::taxprro::CheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::taxprro::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_infoRro : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_infoRro() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_infoRro() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status infoRro(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::RroInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestinfoRro(::grpc::ServerContext* context, ::taxprro::CheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::taxprro::RroInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_sendChk<WithAsyncMethod_sendChkV2<WithAsyncMethod_lastChk<WithAsyncMethod_ping<WithAsyncMethod_delLastChk<WithAsyncMethod_delLastChkId<WithAsyncMethod_statusRro<WithAsyncMethod_infoRro<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_sendChk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sendChk() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::taxprro::Check, ::taxprro::CheckResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::taxprro::Check* request, ::taxprro::CheckResponse* response) { return this->sendChk(context, request, response); }));}
    void SetMessageAllocatorFor_sendChk(
        ::grpc::MessageAllocator< ::taxprro::Check, ::taxprro::CheckResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::taxprro::Check, ::taxprro::CheckResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_sendChk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendChk(::grpc::ServerContext* /*context*/, const ::taxprro::Check* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendChk(
      ::grpc::CallbackServerContext* /*context*/, const ::taxprro::Check* /*request*/, ::taxprro::CheckResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_sendChkV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sendChkV2() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::taxprro::Check, ::taxprro::CheckResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::taxprro::Check* request, ::taxprro::CheckResponse* response) { return this->sendChkV2(context, request, response); }));}
    void SetMessageAllocatorFor_sendChkV2(
        ::grpc::MessageAllocator< ::taxprro::Check, ::taxprro::CheckResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::taxprro::Check, ::taxprro::CheckResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_sendChkV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendChkV2(::grpc::ServerContext* /*context*/, const ::taxprro::Check* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendChkV2(
      ::grpc::CallbackServerContext* /*context*/, const ::taxprro::Check* /*request*/, ::taxprro::CheckResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_lastChk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_lastChk() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::taxprro::CheckRequest, ::taxprro::CheckResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::taxprro::CheckRequest* request, ::taxprro::CheckResponse* response) { return this->lastChk(context, request, response); }));}
    void SetMessageAllocatorFor_lastChk(
        ::grpc::MessageAllocator< ::taxprro::CheckRequest, ::taxprro::CheckResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::taxprro::CheckRequest, ::taxprro::CheckResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_lastChk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status lastChk(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* lastChk(
      ::grpc::CallbackServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::CheckResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ping() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::taxprro::Check, ::taxprro::CheckResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::taxprro::Check* request, ::taxprro::CheckResponse* response) { return this->ping(context, request, response); }));}
    void SetMessageAllocatorFor_ping(
        ::grpc::MessageAllocator< ::taxprro::Check, ::taxprro::CheckResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::taxprro::Check, ::taxprro::CheckResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ping(::grpc::ServerContext* /*context*/, const ::taxprro::Check* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ping(
      ::grpc::CallbackServerContext* /*context*/, const ::taxprro::Check* /*request*/, ::taxprro::CheckResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_delLastChk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_delLastChk() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::taxprro::CheckRequest, ::taxprro::CheckResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::taxprro::CheckRequest* request, ::taxprro::CheckResponse* response) { return this->delLastChk(context, request, response); }));}
    void SetMessageAllocatorFor_delLastChk(
        ::grpc::MessageAllocator< ::taxprro::CheckRequest, ::taxprro::CheckResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::taxprro::CheckRequest, ::taxprro::CheckResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_delLastChk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status delLastChk(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* delLastChk(
      ::grpc::CallbackServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::CheckResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_delLastChkId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_delLastChkId() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::taxprro::CheckRequestId, ::taxprro::CheckResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::taxprro::CheckRequestId* request, ::taxprro::CheckResponse* response) { return this->delLastChkId(context, request, response); }));}
    void SetMessageAllocatorFor_delLastChkId(
        ::grpc::MessageAllocator< ::taxprro::CheckRequestId, ::taxprro::CheckResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::taxprro::CheckRequestId, ::taxprro::CheckResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_delLastChkId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status delLastChkId(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequestId* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* delLastChkId(
      ::grpc::CallbackServerContext* /*context*/, const ::taxprro::CheckRequestId* /*request*/, ::taxprro::CheckResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_statusRro : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_statusRro() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::taxprro::CheckRequest, ::taxprro::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::taxprro::CheckRequest* request, ::taxprro::StatusResponse* response) { return this->statusRro(context, request, response); }));}
    void SetMessageAllocatorFor_statusRro(
        ::grpc::MessageAllocator< ::taxprro::CheckRequest, ::taxprro::StatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::taxprro::CheckRequest, ::taxprro::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_statusRro() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status statusRro(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* statusRro(
      ::grpc::CallbackServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::StatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_infoRro : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_infoRro() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::taxprro::CheckRequest, ::taxprro::RroInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::taxprro::CheckRequest* request, ::taxprro::RroInfoResponse* response) { return this->infoRro(context, request, response); }));}
    void SetMessageAllocatorFor_infoRro(
        ::grpc::MessageAllocator< ::taxprro::CheckRequest, ::taxprro::RroInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::taxprro::CheckRequest, ::taxprro::RroInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_infoRro() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status infoRro(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::RroInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* infoRro(
      ::grpc::CallbackServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::RroInfoResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_sendChk<WithCallbackMethod_sendChkV2<WithCallbackMethod_lastChk<WithCallbackMethod_ping<WithCallbackMethod_delLastChk<WithCallbackMethod_delLastChkId<WithCallbackMethod_statusRro<WithCallbackMethod_infoRro<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_sendChk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sendChk() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_sendChk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendChk(::grpc::ServerContext* /*context*/, const ::taxprro::Check* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sendChkV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sendChkV2() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_sendChkV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendChkV2(::grpc::ServerContext* /*context*/, const ::taxprro::Check* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_lastChk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_lastChk() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_lastChk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status lastChk(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ping() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ping(::grpc::ServerContext* /*context*/, const ::taxprro::Check* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_delLastChk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_delLastChk() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_delLastChk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status delLastChk(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_delLastChkId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_delLastChkId() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_delLastChkId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status delLastChkId(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequestId* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_statusRro : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_statusRro() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_statusRro() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status statusRro(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_infoRro : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_infoRro() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_infoRro() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status infoRro(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::RroInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendChk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sendChk() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_sendChk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendChk(::grpc::ServerContext* /*context*/, const ::taxprro::Check* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendChk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendChkV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sendChkV2() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_sendChkV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendChkV2(::grpc::ServerContext* /*context*/, const ::taxprro::Check* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendChkV2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_lastChk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_lastChk() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_lastChk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status lastChk(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlastChk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ping() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ping(::grpc::ServerContext* /*context*/, const ::taxprro::Check* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestping(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_delLastChk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_delLastChk() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_delLastChk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status delLastChk(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdelLastChk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_delLastChkId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_delLastChkId() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_delLastChkId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status delLastChkId(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequestId* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdelLastChkId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_statusRro : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_statusRro() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_statusRro() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status statusRro(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststatusRro(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_infoRro : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_infoRro() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_infoRro() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status infoRro(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::RroInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestinfoRro(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sendChk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sendChk() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->sendChk(context, request, response); }));
    }
    ~WithRawCallbackMethod_sendChk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendChk(::grpc::ServerContext* /*context*/, const ::taxprro::Check* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendChk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sendChkV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sendChkV2() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->sendChkV2(context, request, response); }));
    }
    ~WithRawCallbackMethod_sendChkV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendChkV2(::grpc::ServerContext* /*context*/, const ::taxprro::Check* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendChkV2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_lastChk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_lastChk() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->lastChk(context, request, response); }));
    }
    ~WithRawCallbackMethod_lastChk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status lastChk(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* lastChk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ping() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ping(context, request, response); }));
    }
    ~WithRawCallbackMethod_ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ping(::grpc::ServerContext* /*context*/, const ::taxprro::Check* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ping(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_delLastChk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_delLastChk() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->delLastChk(context, request, response); }));
    }
    ~WithRawCallbackMethod_delLastChk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status delLastChk(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* delLastChk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_delLastChkId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_delLastChkId() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->delLastChkId(context, request, response); }));
    }
    ~WithRawCallbackMethod_delLastChkId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status delLastChkId(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequestId* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* delLastChkId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_statusRro : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_statusRro() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->statusRro(context, request, response); }));
    }
    ~WithRawCallbackMethod_statusRro() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status statusRro(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* statusRro(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_infoRro : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_infoRro() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->infoRro(context, request, response); }));
    }
    ~WithRawCallbackMethod_infoRro() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status infoRro(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::RroInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* infoRro(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendChk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_sendChk() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::taxprro::Check, ::taxprro::CheckResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::taxprro::Check, ::taxprro::CheckResponse>* streamer) {
                       return this->StreamedsendChk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_sendChk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendChk(::grpc::ServerContext* /*context*/, const ::taxprro::Check* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendChk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::taxprro::Check,::taxprro::CheckResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendChkV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_sendChkV2() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::taxprro::Check, ::taxprro::CheckResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::taxprro::Check, ::taxprro::CheckResponse>* streamer) {
                       return this->StreamedsendChkV2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_sendChkV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendChkV2(::grpc::ServerContext* /*context*/, const ::taxprro::Check* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendChkV2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::taxprro::Check,::taxprro::CheckResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_lastChk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_lastChk() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::taxprro::CheckRequest, ::taxprro::CheckResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::taxprro::CheckRequest, ::taxprro::CheckResponse>* streamer) {
                       return this->StreamedlastChk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_lastChk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status lastChk(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedlastChk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::taxprro::CheckRequest,::taxprro::CheckResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ping() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::taxprro::Check, ::taxprro::CheckResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::taxprro::Check, ::taxprro::CheckResponse>* streamer) {
                       return this->Streamedping(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ping(::grpc::ServerContext* /*context*/, const ::taxprro::Check* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedping(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::taxprro::Check,::taxprro::CheckResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_delLastChk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_delLastChk() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::taxprro::CheckRequest, ::taxprro::CheckResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::taxprro::CheckRequest, ::taxprro::CheckResponse>* streamer) {
                       return this->StreameddelLastChk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_delLastChk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status delLastChk(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddelLastChk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::taxprro::CheckRequest,::taxprro::CheckResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_delLastChkId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_delLastChkId() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::taxprro::CheckRequestId, ::taxprro::CheckResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::taxprro::CheckRequestId, ::taxprro::CheckResponse>* streamer) {
                       return this->StreameddelLastChkId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_delLastChkId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status delLastChkId(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequestId* /*request*/, ::taxprro::CheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddelLastChkId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::taxprro::CheckRequestId,::taxprro::CheckResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_statusRro : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_statusRro() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::taxprro::CheckRequest, ::taxprro::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::taxprro::CheckRequest, ::taxprro::StatusResponse>* streamer) {
                       return this->StreamedstatusRro(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_statusRro() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status statusRro(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedstatusRro(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::taxprro::CheckRequest,::taxprro::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_infoRro : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_infoRro() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::taxprro::CheckRequest, ::taxprro::RroInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::taxprro::CheckRequest, ::taxprro::RroInfoResponse>* streamer) {
                       return this->StreamedinfoRro(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_infoRro() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status infoRro(::grpc::ServerContext* /*context*/, const ::taxprro::CheckRequest* /*request*/, ::taxprro::RroInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedinfoRro(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::taxprro::CheckRequest,::taxprro::RroInfoResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_sendChk<WithStreamedUnaryMethod_sendChkV2<WithStreamedUnaryMethod_lastChk<WithStreamedUnaryMethod_ping<WithStreamedUnaryMethod_delLastChk<WithStreamedUnaryMethod_delLastChkId<WithStreamedUnaryMethod_statusRro<WithStreamedUnaryMethod_infoRro<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_sendChk<WithStreamedUnaryMethod_sendChkV2<WithStreamedUnaryMethod_lastChk<WithStreamedUnaryMethod_ping<WithStreamedUnaryMethod_delLastChk<WithStreamedUnaryMethod_delLastChkId<WithStreamedUnaryMethod_statusRro<WithStreamedUnaryMethod_infoRro<Service > > > > > > > > StreamedService;
};

}  // namespace taxprro


#endif  // GRPC_tax_2eproto__INCLUDED
