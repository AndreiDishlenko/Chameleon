// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tax.proto

#include "tax.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace taxprro {
constexpr Check::Check(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rro_fn_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , check_sign_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_offline_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_cancel_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , date_time_(int64_t{0})
  , local_number_(0)
  , check_type_(0)
{}
struct CheckDefaultTypeInternal {
  constexpr CheckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CheckDefaultTypeInternal() {}
  union {
    Check _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CheckDefaultTypeInternal _Check_default_instance_;
constexpr CheckRequest::CheckRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rro_fn_sign_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CheckRequestDefaultTypeInternal {
  constexpr CheckRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CheckRequestDefaultTypeInternal() {}
  union {
    CheckRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CheckRequestDefaultTypeInternal _CheckRequest_default_instance_;
constexpr CheckRequestId::CheckRequestId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rro_fn_sign_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CheckRequestIdDefaultTypeInternal {
  constexpr CheckRequestIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CheckRequestIdDefaultTypeInternal() {}
  union {
    CheckRequestId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CheckRequestIdDefaultTypeInternal _CheckRequestId_default_instance_;
constexpr CheckResponse::CheckResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_sign_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_sign_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(0)
{}
struct CheckResponseDefaultTypeInternal {
  constexpr CheckResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CheckResponseDefaultTypeInternal() {}
  union {
    CheckResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CheckResponseDefaultTypeInternal _CheckResponse_default_instance_;
constexpr StatusResponse::StatusResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : last_signer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , open_shift_(false)
  , online_(false)
  , status_(0)
{}
struct StatusResponseDefaultTypeInternal {
  constexpr StatusResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusResponseDefaultTypeInternal() {}
  union {
    StatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
constexpr RroInfoResponse_Operator::RroInfoResponse_Operator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serial_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , isname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(0)
  , senior_(false){}
struct RroInfoResponse_OperatorDefaultTypeInternal {
  constexpr RroInfoResponse_OperatorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RroInfoResponse_OperatorDefaultTypeInternal() {}
  union {
    RroInfoResponse_Operator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RroInfoResponse_OperatorDefaultTypeInternal _RroInfoResponse_Operator_default_instance_;
constexpr RroInfoResponse::RroInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : operators_()
  , last_signer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , addr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pn_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tins_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_pay_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(0)

  , status_rro_(0)
  , open_shift_(false)
  , online_(false)
  , single_tax_(false)
  , offline_allowed_(false)
  , add_num_(0)
  , lnum_(0){}
struct RroInfoResponseDefaultTypeInternal {
  constexpr RroInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RroInfoResponseDefaultTypeInternal() {}
  union {
    RroInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RroInfoResponseDefaultTypeInternal _RroInfoResponse_default_instance_;
}  // namespace taxprro
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tax_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tax_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tax_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tax_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::taxprro::Check, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::taxprro::Check, rro_fn_),
  PROTOBUF_FIELD_OFFSET(::taxprro::Check, date_time_),
  PROTOBUF_FIELD_OFFSET(::taxprro::Check, check_sign_),
  PROTOBUF_FIELD_OFFSET(::taxprro::Check, local_number_),
  PROTOBUF_FIELD_OFFSET(::taxprro::Check, check_type_),
  PROTOBUF_FIELD_OFFSET(::taxprro::Check, id_offline_),
  PROTOBUF_FIELD_OFFSET(::taxprro::Check, id_cancel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::taxprro::CheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::taxprro::CheckRequest, rro_fn_sign_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::taxprro::CheckRequestId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::taxprro::CheckRequestId, id_),
  PROTOBUF_FIELD_OFFSET(::taxprro::CheckRequestId, rro_fn_sign_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::taxprro::CheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::taxprro::CheckResponse, id_),
  PROTOBUF_FIELD_OFFSET(::taxprro::CheckResponse, status_),
  PROTOBUF_FIELD_OFFSET(::taxprro::CheckResponse, id_sign_),
  PROTOBUF_FIELD_OFFSET(::taxprro::CheckResponse, data_sign_),
  PROTOBUF_FIELD_OFFSET(::taxprro::CheckResponse, error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::taxprro::StatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::taxprro::StatusResponse, open_shift_),
  PROTOBUF_FIELD_OFFSET(::taxprro::StatusResponse, online_),
  PROTOBUF_FIELD_OFFSET(::taxprro::StatusResponse, last_signer_),
  PROTOBUF_FIELD_OFFSET(::taxprro::StatusResponse, status_),
  PROTOBUF_FIELD_OFFSET(::taxprro::StatusResponse, error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::taxprro::RroInfoResponse_Operator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::taxprro::RroInfoResponse_Operator, serial_),
  PROTOBUF_FIELD_OFFSET(::taxprro::RroInfoResponse_Operator, status_),
  PROTOBUF_FIELD_OFFSET(::taxprro::RroInfoResponse_Operator, senior_),
  PROTOBUF_FIELD_OFFSET(::taxprro::RroInfoResponse_Operator, isname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::taxprro::RroInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::taxprro::RroInfoResponse, status_),
  PROTOBUF_FIELD_OFFSET(::taxprro::RroInfoResponse, status_rro_),
  PROTOBUF_FIELD_OFFSET(::taxprro::RroInfoResponse, open_shift_),
  PROTOBUF_FIELD_OFFSET(::taxprro::RroInfoResponse, online_),
  PROTOBUF_FIELD_OFFSET(::taxprro::RroInfoResponse, last_signer_),
  PROTOBUF_FIELD_OFFSET(::taxprro::RroInfoResponse, name_),
  PROTOBUF_FIELD_OFFSET(::taxprro::RroInfoResponse, name_to_),
  PROTOBUF_FIELD_OFFSET(::taxprro::RroInfoResponse, addr_),
  PROTOBUF_FIELD_OFFSET(::taxprro::RroInfoResponse, single_tax_),
  PROTOBUF_FIELD_OFFSET(::taxprro::RroInfoResponse, offline_allowed_),
  PROTOBUF_FIELD_OFFSET(::taxprro::RroInfoResponse, add_num_),
  PROTOBUF_FIELD_OFFSET(::taxprro::RroInfoResponse, pn_),
  PROTOBUF_FIELD_OFFSET(::taxprro::RroInfoResponse, operators_),
  PROTOBUF_FIELD_OFFSET(::taxprro::RroInfoResponse, tins_),
  PROTOBUF_FIELD_OFFSET(::taxprro::RroInfoResponse, lnum_),
  PROTOBUF_FIELD_OFFSET(::taxprro::RroInfoResponse, name_pay_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::taxprro::Check)},
  { 12, -1, sizeof(::taxprro::CheckRequest)},
  { 18, -1, sizeof(::taxprro::CheckRequestId)},
  { 25, -1, sizeof(::taxprro::CheckResponse)},
  { 35, -1, sizeof(::taxprro::StatusResponse)},
  { 45, -1, sizeof(::taxprro::RroInfoResponse_Operator)},
  { 54, -1, sizeof(::taxprro::RroInfoResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::taxprro::_Check_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::taxprro::_CheckRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::taxprro::_CheckRequestId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::taxprro::_CheckResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::taxprro::_StatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::taxprro::_RroInfoResponse_Operator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::taxprro::_RroInfoResponse_default_instance_),
};

const char descriptor_table_protodef_tax_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ttax.proto\022\007taxprro\"\337\001\n\005Check\022\016\n\006rro_fn"
  "\030\001 \001(\t\022\021\n\tdate_time\030\002 \001(\003\022\022\n\ncheck_sign\030"
  "\003 \001(\014\022\024\n\014local_number\030\004 \001(\005\022\'\n\ncheck_typ"
  "e\030\005 \001(\0162\023.taxprro.Check.Type\022\022\n\nid_offli"
  "ne\030\006 \001(\t\022\021\n\tid_cancel\030\007 \001(\t\"9\n\004Type\022\013\n\007U"
  "NKNOWN\020\000\022\007\n\003CHK\020\001\022\013\n\007ZREPORT\020\002\022\016\n\nSERVIC"
  "ECHK\020\003\"#\n\014CheckRequest\022\023\n\013rro_fn_sign\030\003 "
  "\001(\014\"1\n\016CheckRequestId\022\n\n\002id\030\001 \001(\t\022\023\n\013rro"
  "_fn_sign\030\002 \001(\014\"\223\005\n\rCheckResponse\022\n\n\002id\030\001"
  " \001(\t\022-\n\006status\030\002 \001(\0162\035.taxprro.CheckResp"
  "onse.Status\022\017\n\007id_sign\030\003 \001(\014\022\021\n\tdata_sig"
  "n\030\004 \001(\014\022\025\n\rerror_message\030\005 \001(\t\"\213\004\n\006Statu"
  "s\022\013\n\007UNKNOWN\020\000\022\006\n\002OK\020\001\022\031\n\014ERROR_VEREFY\020\377"
  "\377\377\377\377\377\377\377\377\001\022\030\n\013ERROR_CHECK\020\376\377\377\377\377\377\377\377\377\001\022\027\n\nE"
  "RROR_SAVE\020\375\377\377\377\377\377\377\377\377\001\022\032\n\rERROR_UNKNOWN\020\374\377"
  "\377\377\377\377\377\377\377\001\022\027\n\nERROR_TYPE\020\373\377\377\377\377\377\377\377\377\001\022#\n\026ERR"
  "OR_NOT_PREV_ZREPORT\020\372\377\377\377\377\377\377\377\377\001\022\026\n\tERROR_"
  "XML\020\371\377\377\377\377\377\377\377\377\001\022\033\n\016ERROR_XML_DATE\020\370\377\377\377\377\377\377"
  "\377\377\001\022\032\n\rERROR_XML_CHK\020\367\377\377\377\377\377\377\377\377\001\022\036\n\021ERROR"
  "_XML_ZREPORT\020\366\377\377\377\377\377\377\377\377\001\022\036\n\021ERROR_OFFLINE"
  "_168\020\365\377\377\377\377\377\377\377\377\001\022 \n\023ERROR_BAD_HASH_PREV\020\364"
  "\377\377\377\377\377\377\377\377\001\022%\n\030ERROR_NOT_REGISTERED_RRO\020\363\377"
  "\377\377\377\377\377\377\377\001\022(\n\033ERROR_NOT_REGISTERED_SIGNER\020"
  "\362\377\377\377\377\377\377\377\377\001\022!\n\024ERROR_NOT_OPEN_SHIFT\020\361\377\377\377\377"
  "\377\377\377\377\001\022\035\n\020ERROR_OFFLINE_ID\020\360\377\377\377\377\377\377\377\377\001\"\322\002\n"
  "\016StatusResponse\022\022\n\nopen_shift\030\001 \001(\010\022\016\n\006o"
  "nline\030\002 \001(\010\022\023\n\013last_signer\030\003 \001(\t\022.\n\006stat"
  "us\030\004 \001(\0162\036.taxprro.StatusResponse.Status"
  "\022\025\n\rerror_message\030\005 \001(\t\"\277\001\n\006Status\022\013\n\007UN"
  "KNOWN\020\000\022\006\n\002OK\020\001\022\031\n\014ERROR_VEREFY\020\377\377\377\377\377\377\377\377"
  "\377\001\022\030\n\013ERROR_CHECK\020\376\377\377\377\377\377\377\377\377\001\022\032\n\rERROR_UN"
  "KNOWN\020\374\377\377\377\377\377\377\377\377\001\022%\n\030ERROR_NOT_REGISTERED"
  "_RRO\020\363\377\377\377\377\377\377\377\377\001\022(\n\033ERROR_NOT_REGISTERED_"
  "SIGNER\020\362\377\377\377\377\377\377\377\377\001\"\370\004\n\017RroInfoResponse\022/\n"
  "\006status\030\001 \001(\0162\037.taxprro.RroInfoResponse."
  "Status\022\022\n\nstatus_rro\030\002 \001(\005\022\022\n\nopen_shift"
  "\030\003 \001(\010\022\016\n\006online\030\004 \001(\010\022\023\n\013last_signer\030\005 "
  "\001(\t\022\014\n\004name\030\006 \001(\t\022\017\n\007name_to\030\007 \001(\t\022\014\n\004ad"
  "dr\030\010 \001(\t\022\022\n\nsingle_tax\030\t \001(\010\022\027\n\017offline_"
  "allowed\030\n \001(\010\022\017\n\007add_num\030\013 \001(\005\022\n\n\002pn\030\014 \001"
  "(\t\0224\n\toperators\030\r \003(\0132!.taxprro.RroInfoR"
  "esponse.Operator\022\014\n\004tins\030\016 \001(\t\022\014\n\004lnum\030\017"
  " \001(\005\022\020\n\010name_pay\030\020 \001(\t\032J\n\010Operator\022\016\n\006se"
  "rial\030\001 \001(\t\022\016\n\006status\030\002 \001(\005\022\016\n\006senior\030\003 \001"
  "(\010\022\016\n\006isname\030\004 \001(\t\"\277\001\n\006Status\022\013\n\007UNKNOWN"
  "\020\000\022\006\n\002OK\020\001\022\031\n\014ERROR_VEREFY\020\377\377\377\377\377\377\377\377\377\001\022\030\n"
  "\013ERROR_CHECK\020\376\377\377\377\377\377\377\377\377\001\022\032\n\rERROR_UNKNOWN"
  "\020\374\377\377\377\377\377\377\377\377\001\022%\n\030ERROR_NOT_REGISTERED_RRO\020"
  "\363\377\377\377\377\377\377\377\377\001\022(\n\033ERROR_NOT_REGISTERED_SIGNE"
  "R\020\362\377\377\377\377\377\377\377\377\0012\333\003\n\020ChkIncomeService\0221\n\007sen"
  "dChk\022\016.taxprro.Check\032\026.taxprro.CheckResp"
  "onse\0223\n\tsendChkV2\022\016.taxprro.Check\032\026.taxp"
  "rro.CheckResponse\0228\n\007lastChk\022\025.taxprro.C"
  "heckRequest\032\026.taxprro.CheckResponse\022.\n\004p"
  "ing\022\016.taxprro.Check\032\026.taxprro.CheckRespo"
  "nse\022;\n\ndelLastChk\022\025.taxprro.CheckRequest"
  "\032\026.taxprro.CheckResponse\022\?\n\014delLastChkId"
  "\022\027.taxprro.CheckRequestId\032\026.taxprro.Chec"
  "kResponse\022;\n\tstatusRro\022\025.taxprro.CheckRe"
  "quest\032\027.taxprro.StatusResponse\022:\n\007infoRr"
  "o\022\025.taxprro.CheckRequest\032\030.taxprro.RroIn"
  "foResponseB\002P\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tax_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tax_2eproto = {
  false, false, 2462, descriptor_table_protodef_tax_2eproto, "tax.proto", 
  &descriptor_table_tax_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_tax_2eproto::offsets,
  file_level_metadata_tax_2eproto, file_level_enum_descriptors_tax_2eproto, file_level_service_descriptors_tax_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tax_2eproto_getter() {
  return &descriptor_table_tax_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tax_2eproto(&descriptor_table_tax_2eproto);
namespace taxprro {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Check_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tax_2eproto);
  return file_level_enum_descriptors_tax_2eproto[0];
}
bool Check_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Check_Type Check::UNKNOWN;
constexpr Check_Type Check::CHK;
constexpr Check_Type Check::ZREPORT;
constexpr Check_Type Check::SERVICECHK;
constexpr Check_Type Check::Type_MIN;
constexpr Check_Type Check::Type_MAX;
constexpr int Check::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CheckResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tax_2eproto);
  return file_level_enum_descriptors_tax_2eproto[1];
}
bool CheckResponse_Status_IsValid(int value) {
  switch (value) {
    case -16:
    case -15:
    case -14:
    case -13:
    case -12:
    case -11:
    case -10:
    case -9:
    case -8:
    case -7:
    case -6:
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CheckResponse_Status CheckResponse::UNKNOWN;
constexpr CheckResponse_Status CheckResponse::OK;
constexpr CheckResponse_Status CheckResponse::ERROR_VEREFY;
constexpr CheckResponse_Status CheckResponse::ERROR_CHECK;
constexpr CheckResponse_Status CheckResponse::ERROR_SAVE;
constexpr CheckResponse_Status CheckResponse::ERROR_UNKNOWN;
constexpr CheckResponse_Status CheckResponse::ERROR_TYPE;
constexpr CheckResponse_Status CheckResponse::ERROR_NOT_PREV_ZREPORT;
constexpr CheckResponse_Status CheckResponse::ERROR_XML;
constexpr CheckResponse_Status CheckResponse::ERROR_XML_DATE;
constexpr CheckResponse_Status CheckResponse::ERROR_XML_CHK;
constexpr CheckResponse_Status CheckResponse::ERROR_XML_ZREPORT;
constexpr CheckResponse_Status CheckResponse::ERROR_OFFLINE_168;
constexpr CheckResponse_Status CheckResponse::ERROR_BAD_HASH_PREV;
constexpr CheckResponse_Status CheckResponse::ERROR_NOT_REGISTERED_RRO;
constexpr CheckResponse_Status CheckResponse::ERROR_NOT_REGISTERED_SIGNER;
constexpr CheckResponse_Status CheckResponse::ERROR_NOT_OPEN_SHIFT;
constexpr CheckResponse_Status CheckResponse::ERROR_OFFLINE_ID;
constexpr CheckResponse_Status CheckResponse::Status_MIN;
constexpr CheckResponse_Status CheckResponse::Status_MAX;
constexpr int CheckResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tax_2eproto);
  return file_level_enum_descriptors_tax_2eproto[2];
}
bool StatusResponse_Status_IsValid(int value) {
  switch (value) {
    case -14:
    case -13:
    case -4:
    case -2:
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StatusResponse_Status StatusResponse::UNKNOWN;
constexpr StatusResponse_Status StatusResponse::OK;
constexpr StatusResponse_Status StatusResponse::ERROR_VEREFY;
constexpr StatusResponse_Status StatusResponse::ERROR_CHECK;
constexpr StatusResponse_Status StatusResponse::ERROR_UNKNOWN;
constexpr StatusResponse_Status StatusResponse::ERROR_NOT_REGISTERED_RRO;
constexpr StatusResponse_Status StatusResponse::ERROR_NOT_REGISTERED_SIGNER;
constexpr StatusResponse_Status StatusResponse::Status_MIN;
constexpr StatusResponse_Status StatusResponse::Status_MAX;
constexpr int StatusResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RroInfoResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tax_2eproto);
  return file_level_enum_descriptors_tax_2eproto[3];
}
bool RroInfoResponse_Status_IsValid(int value) {
  switch (value) {
    case -14:
    case -13:
    case -4:
    case -2:
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RroInfoResponse_Status RroInfoResponse::UNKNOWN;
constexpr RroInfoResponse_Status RroInfoResponse::OK;
constexpr RroInfoResponse_Status RroInfoResponse::ERROR_VEREFY;
constexpr RroInfoResponse_Status RroInfoResponse::ERROR_CHECK;
constexpr RroInfoResponse_Status RroInfoResponse::ERROR_UNKNOWN;
constexpr RroInfoResponse_Status RroInfoResponse::ERROR_NOT_REGISTERED_RRO;
constexpr RroInfoResponse_Status RroInfoResponse::ERROR_NOT_REGISTERED_SIGNER;
constexpr RroInfoResponse_Status RroInfoResponse::Status_MIN;
constexpr RroInfoResponse_Status RroInfoResponse::Status_MAX;
constexpr int RroInfoResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Check::_Internal {
 public:
};

Check::Check(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:taxprro.Check)
}
Check::Check(const Check& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rro_fn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rro_fn().empty()) {
    rro_fn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rro_fn(), 
      GetArenaForAllocation());
  }
  check_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_check_sign().empty()) {
    check_sign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_check_sign(), 
      GetArenaForAllocation());
  }
  id_offline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id_offline().empty()) {
    id_offline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id_offline(), 
      GetArenaForAllocation());
  }
  id_cancel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id_cancel().empty()) {
    id_cancel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id_cancel(), 
      GetArenaForAllocation());
  }
  ::memcpy(&date_time_, &from.date_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&check_type_) -
    reinterpret_cast<char*>(&date_time_)) + sizeof(check_type_));
  // @@protoc_insertion_point(copy_constructor:taxprro.Check)
}

inline void Check::SharedCtor() {
rro_fn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
check_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_offline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_cancel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&date_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&check_type_) -
    reinterpret_cast<char*>(&date_time_)) + sizeof(check_type_));
}

Check::~Check() {
  // @@protoc_insertion_point(destructor:taxprro.Check)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Check::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rro_fn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  check_sign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_offline_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_cancel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Check::ArenaDtor(void* object) {
  Check* _this = reinterpret_cast< Check* >(object);
  (void)_this;
}
void Check::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Check::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Check::Clear() {
// @@protoc_insertion_point(message_clear_start:taxprro.Check)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rro_fn_.ClearToEmpty();
  check_sign_.ClearToEmpty();
  id_offline_.ClearToEmpty();
  id_cancel_.ClearToEmpty();
  ::memset(&date_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&check_type_) -
      reinterpret_cast<char*>(&date_time_)) + sizeof(check_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Check::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string rro_fn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rro_fn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "taxprro.Check.rro_fn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 date_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          date_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes check_sign = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_check_sign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 local_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          local_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .taxprro.Check.Type check_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_check_type(static_cast<::taxprro::Check_Type>(val));
        } else goto handle_unusual;
        continue;
      // string id_offline = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_id_offline();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "taxprro.Check.id_offline"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id_cancel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_id_cancel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "taxprro.Check.id_cancel"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Check::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:taxprro.Check)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rro_fn = 1;
  if (!this->_internal_rro_fn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rro_fn().data(), static_cast<int>(this->_internal_rro_fn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taxprro.Check.rro_fn");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rro_fn(), target);
  }

  // int64 date_time = 2;
  if (this->_internal_date_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_date_time(), target);
  }

  // bytes check_sign = 3;
  if (!this->_internal_check_sign().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_check_sign(), target);
  }

  // int32 local_number = 4;
  if (this->_internal_local_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_local_number(), target);
  }

  // .taxprro.Check.Type check_type = 5;
  if (this->_internal_check_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_check_type(), target);
  }

  // string id_offline = 6;
  if (!this->_internal_id_offline().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id_offline().data(), static_cast<int>(this->_internal_id_offline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taxprro.Check.id_offline");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_id_offline(), target);
  }

  // string id_cancel = 7;
  if (!this->_internal_id_cancel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id_cancel().data(), static_cast<int>(this->_internal_id_cancel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taxprro.Check.id_cancel");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_id_cancel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:taxprro.Check)
  return target;
}

size_t Check::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:taxprro.Check)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rro_fn = 1;
  if (!this->_internal_rro_fn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rro_fn());
  }

  // bytes check_sign = 3;
  if (!this->_internal_check_sign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_check_sign());
  }

  // string id_offline = 6;
  if (!this->_internal_id_offline().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id_offline());
  }

  // string id_cancel = 7;
  if (!this->_internal_id_cancel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id_cancel());
  }

  // int64 date_time = 2;
  if (this->_internal_date_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_date_time());
  }

  // int32 local_number = 4;
  if (this->_internal_local_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_local_number());
  }

  // .taxprro.Check.Type check_type = 5;
  if (this->_internal_check_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_check_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Check::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Check::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Check::GetClassData() const { return &_class_data_; }

void Check::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Check *>(to)->MergeFrom(
      static_cast<const Check &>(from));
}


void Check::MergeFrom(const Check& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:taxprro.Check)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rro_fn().empty()) {
    _internal_set_rro_fn(from._internal_rro_fn());
  }
  if (!from._internal_check_sign().empty()) {
    _internal_set_check_sign(from._internal_check_sign());
  }
  if (!from._internal_id_offline().empty()) {
    _internal_set_id_offline(from._internal_id_offline());
  }
  if (!from._internal_id_cancel().empty()) {
    _internal_set_id_cancel(from._internal_id_cancel());
  }
  if (from._internal_date_time() != 0) {
    _internal_set_date_time(from._internal_date_time());
  }
  if (from._internal_local_number() != 0) {
    _internal_set_local_number(from._internal_local_number());
  }
  if (from._internal_check_type() != 0) {
    _internal_set_check_type(from._internal_check_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Check::CopyFrom(const Check& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:taxprro.Check)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Check::IsInitialized() const {
  return true;
}

void Check::InternalSwap(Check* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rro_fn_, GetArenaForAllocation(),
      &other->rro_fn_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &check_sign_, GetArenaForAllocation(),
      &other->check_sign_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_offline_, GetArenaForAllocation(),
      &other->id_offline_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_cancel_, GetArenaForAllocation(),
      &other->id_cancel_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Check, check_type_)
      + sizeof(Check::check_type_)
      - PROTOBUF_FIELD_OFFSET(Check, date_time_)>(
          reinterpret_cast<char*>(&date_time_),
          reinterpret_cast<char*>(&other->date_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Check::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tax_2eproto_getter, &descriptor_table_tax_2eproto_once,
      file_level_metadata_tax_2eproto[0]);
}

// ===================================================================

class CheckRequest::_Internal {
 public:
};

CheckRequest::CheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:taxprro.CheckRequest)
}
CheckRequest::CheckRequest(const CheckRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rro_fn_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rro_fn_sign().empty()) {
    rro_fn_sign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rro_fn_sign(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:taxprro.CheckRequest)
}

inline void CheckRequest::SharedCtor() {
rro_fn_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CheckRequest::~CheckRequest() {
  // @@protoc_insertion_point(destructor:taxprro.CheckRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CheckRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rro_fn_sign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckRequest::ArenaDtor(void* object) {
  CheckRequest* _this = reinterpret_cast< CheckRequest* >(object);
  (void)_this;
}
void CheckRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CheckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:taxprro.CheckRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rro_fn_sign_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes rro_fn_sign = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_rro_fn_sign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:taxprro.CheckRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes rro_fn_sign = 3;
  if (!this->_internal_rro_fn_sign().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_rro_fn_sign(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:taxprro.CheckRequest)
  return target;
}

size_t CheckRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:taxprro.CheckRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes rro_fn_sign = 3;
  if (!this->_internal_rro_fn_sign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rro_fn_sign());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CheckRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckRequest::GetClassData() const { return &_class_data_; }

void CheckRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CheckRequest *>(to)->MergeFrom(
      static_cast<const CheckRequest &>(from));
}


void CheckRequest::MergeFrom(const CheckRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:taxprro.CheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rro_fn_sign().empty()) {
    _internal_set_rro_fn_sign(from._internal_rro_fn_sign());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckRequest::CopyFrom(const CheckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:taxprro.CheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckRequest::IsInitialized() const {
  return true;
}

void CheckRequest::InternalSwap(CheckRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rro_fn_sign_, GetArenaForAllocation(),
      &other->rro_fn_sign_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tax_2eproto_getter, &descriptor_table_tax_2eproto_once,
      file_level_metadata_tax_2eproto[1]);
}

// ===================================================================

class CheckRequestId::_Internal {
 public:
};

CheckRequestId::CheckRequestId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:taxprro.CheckRequestId)
}
CheckRequestId::CheckRequestId(const CheckRequestId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  rro_fn_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rro_fn_sign().empty()) {
    rro_fn_sign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rro_fn_sign(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:taxprro.CheckRequestId)
}

inline void CheckRequestId::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rro_fn_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CheckRequestId::~CheckRequestId() {
  // @@protoc_insertion_point(destructor:taxprro.CheckRequestId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CheckRequestId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rro_fn_sign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckRequestId::ArenaDtor(void* object) {
  CheckRequestId* _this = reinterpret_cast< CheckRequestId* >(object);
  (void)_this;
}
void CheckRequestId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckRequestId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CheckRequestId::Clear() {
// @@protoc_insertion_point(message_clear_start:taxprro.CheckRequestId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  rro_fn_sign_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckRequestId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "taxprro.CheckRequestId.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes rro_fn_sign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_rro_fn_sign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckRequestId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:taxprro.CheckRequestId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taxprro.CheckRequestId.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bytes rro_fn_sign = 2;
  if (!this->_internal_rro_fn_sign().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_rro_fn_sign(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:taxprro.CheckRequestId)
  return target;
}

size_t CheckRequestId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:taxprro.CheckRequestId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bytes rro_fn_sign = 2;
  if (!this->_internal_rro_fn_sign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rro_fn_sign());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckRequestId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CheckRequestId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckRequestId::GetClassData() const { return &_class_data_; }

void CheckRequestId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CheckRequestId *>(to)->MergeFrom(
      static_cast<const CheckRequestId &>(from));
}


void CheckRequestId::MergeFrom(const CheckRequestId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:taxprro.CheckRequestId)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_rro_fn_sign().empty()) {
    _internal_set_rro_fn_sign(from._internal_rro_fn_sign());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckRequestId::CopyFrom(const CheckRequestId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:taxprro.CheckRequestId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckRequestId::IsInitialized() const {
  return true;
}

void CheckRequestId::InternalSwap(CheckRequestId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rro_fn_sign_, GetArenaForAllocation(),
      &other->rro_fn_sign_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckRequestId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tax_2eproto_getter, &descriptor_table_tax_2eproto_once,
      file_level_metadata_tax_2eproto[2]);
}

// ===================================================================

class CheckResponse::_Internal {
 public:
};

CheckResponse::CheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:taxprro.CheckResponse)
}
CheckResponse::CheckResponse(const CheckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  id_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id_sign().empty()) {
    id_sign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id_sign(), 
      GetArenaForAllocation());
  }
  data_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data_sign().empty()) {
    data_sign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data_sign(), 
      GetArenaForAllocation());
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:taxprro.CheckResponse)
}

inline void CheckResponse::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_ = 0;
}

CheckResponse::~CheckResponse() {
  // @@protoc_insertion_point(destructor:taxprro.CheckResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CheckResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_sign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_sign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckResponse::ArenaDtor(void* object) {
  CheckResponse* _this = reinterpret_cast< CheckResponse* >(object);
  (void)_this;
}
void CheckResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:taxprro.CheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  id_sign_.ClearToEmpty();
  data_sign_.ClearToEmpty();
  error_message_.ClearToEmpty();
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "taxprro.CheckResponse.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .taxprro.CheckResponse.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::taxprro::CheckResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      // bytes id_sign = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_id_sign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data_sign = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data_sign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "taxprro.CheckResponse.error_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:taxprro.CheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taxprro.CheckResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .taxprro.CheckResponse.Status status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // bytes id_sign = 3;
  if (!this->_internal_id_sign().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_id_sign(), target);
  }

  // bytes data_sign = 4;
  if (!this->_internal_data_sign().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data_sign(), target);
  }

  // string error_message = 5;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taxprro.CheckResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:taxprro.CheckResponse)
  return target;
}

size_t CheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:taxprro.CheckResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bytes id_sign = 3;
  if (!this->_internal_id_sign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id_sign());
  }

  // bytes data_sign = 4;
  if (!this->_internal_data_sign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_sign());
  }

  // string error_message = 5;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .taxprro.CheckResponse.Status status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CheckResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckResponse::GetClassData() const { return &_class_data_; }

void CheckResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CheckResponse *>(to)->MergeFrom(
      static_cast<const CheckResponse &>(from));
}


void CheckResponse::MergeFrom(const CheckResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:taxprro.CheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_id_sign().empty()) {
    _internal_set_id_sign(from._internal_id_sign());
  }
  if (!from._internal_data_sign().empty()) {
    _internal_set_data_sign(from._internal_data_sign());
  }
  if (!from._internal_error_message().empty()) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckResponse::CopyFrom(const CheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:taxprro.CheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckResponse::IsInitialized() const {
  return true;
}

void CheckResponse::InternalSwap(CheckResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_sign_, GetArenaForAllocation(),
      &other->id_sign_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_sign_, GetArenaForAllocation(),
      &other->data_sign_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, GetArenaForAllocation(),
      &other->error_message_, other->GetArenaForAllocation()
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tax_2eproto_getter, &descriptor_table_tax_2eproto_once,
      file_level_metadata_tax_2eproto[3]);
}

// ===================================================================

class StatusResponse::_Internal {
 public:
};

StatusResponse::StatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:taxprro.StatusResponse)
}
StatusResponse::StatusResponse(const StatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_signer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_signer().empty()) {
    last_signer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_signer(), 
      GetArenaForAllocation());
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_message().empty()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  ::memcpy(&open_shift_, &from.open_shift_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&open_shift_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:taxprro.StatusResponse)
}

inline void StatusResponse::SharedCtor() {
last_signer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&open_shift_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&open_shift_)) + sizeof(status_));
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:taxprro.StatusResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  last_signer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StatusResponse::ArenaDtor(void* object) {
  StatusResponse* _this = reinterpret_cast< StatusResponse* >(object);
  (void)_this;
}
void StatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:taxprro.StatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  last_signer_.ClearToEmpty();
  error_message_.ClearToEmpty();
  ::memset(&open_shift_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&open_shift_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool open_shift = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          open_shift_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool online = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_signer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_last_signer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "taxprro.StatusResponse.last_signer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .taxprro.StatusResponse.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::taxprro::StatusResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      // string error_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "taxprro.StatusResponse.error_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:taxprro.StatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool open_shift = 1;
  if (this->_internal_open_shift() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_open_shift(), target);
  }

  // bool online = 2;
  if (this->_internal_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_online(), target);
  }

  // string last_signer = 3;
  if (!this->_internal_last_signer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_signer().data(), static_cast<int>(this->_internal_last_signer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taxprro.StatusResponse.last_signer");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_last_signer(), target);
  }

  // .taxprro.StatusResponse.Status status = 4;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  // string error_message = 5;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taxprro.StatusResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:taxprro.StatusResponse)
  return target;
}

size_t StatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:taxprro.StatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string last_signer = 3;
  if (!this->_internal_last_signer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_signer());
  }

  // string error_message = 5;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // bool open_shift = 1;
  if (this->_internal_open_shift() != 0) {
    total_size += 1 + 1;
  }

  // bool online = 2;
  if (this->_internal_online() != 0) {
    total_size += 1 + 1;
  }

  // .taxprro.StatusResponse.Status status = 4;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusResponse::GetClassData() const { return &_class_data_; }

void StatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StatusResponse *>(to)->MergeFrom(
      static_cast<const StatusResponse &>(from));
}


void StatusResponse::MergeFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:taxprro.StatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_last_signer().empty()) {
    _internal_set_last_signer(from._internal_last_signer());
  }
  if (!from._internal_error_message().empty()) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_open_shift() != 0) {
    _internal_set_open_shift(from._internal_open_shift());
  }
  if (from._internal_online() != 0) {
    _internal_set_online(from._internal_online());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:taxprro.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {
  return true;
}

void StatusResponse::InternalSwap(StatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_signer_, GetArenaForAllocation(),
      &other->last_signer_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, GetArenaForAllocation(),
      &other->error_message_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusResponse, status_)
      + sizeof(StatusResponse::status_)
      - PROTOBUF_FIELD_OFFSET(StatusResponse, open_shift_)>(
          reinterpret_cast<char*>(&open_shift_),
          reinterpret_cast<char*>(&other->open_shift_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tax_2eproto_getter, &descriptor_table_tax_2eproto_once,
      file_level_metadata_tax_2eproto[4]);
}

// ===================================================================

class RroInfoResponse_Operator::_Internal {
 public:
};

RroInfoResponse_Operator::RroInfoResponse_Operator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:taxprro.RroInfoResponse.Operator)
}
RroInfoResponse_Operator::RroInfoResponse_Operator(const RroInfoResponse_Operator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serial().empty()) {
    serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serial(), 
      GetArenaForAllocation());
  }
  isname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_isname().empty()) {
    isname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_isname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&senior_) -
    reinterpret_cast<char*>(&status_)) + sizeof(senior_));
  // @@protoc_insertion_point(copy_constructor:taxprro.RroInfoResponse.Operator)
}

inline void RroInfoResponse_Operator::SharedCtor() {
serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
isname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&senior_) -
    reinterpret_cast<char*>(&status_)) + sizeof(senior_));
}

RroInfoResponse_Operator::~RroInfoResponse_Operator() {
  // @@protoc_insertion_point(destructor:taxprro.RroInfoResponse.Operator)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RroInfoResponse_Operator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  serial_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  isname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RroInfoResponse_Operator::ArenaDtor(void* object) {
  RroInfoResponse_Operator* _this = reinterpret_cast< RroInfoResponse_Operator* >(object);
  (void)_this;
}
void RroInfoResponse_Operator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RroInfoResponse_Operator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RroInfoResponse_Operator::Clear() {
// @@protoc_insertion_point(message_clear_start:taxprro.RroInfoResponse.Operator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serial_.ClearToEmpty();
  isname_.ClearToEmpty();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&senior_) -
      reinterpret_cast<char*>(&status_)) + sizeof(senior_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RroInfoResponse_Operator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string serial = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serial();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "taxprro.RroInfoResponse.Operator.serial"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool senior = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          senior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string isname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_isname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "taxprro.RroInfoResponse.Operator.isname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RroInfoResponse_Operator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:taxprro.RroInfoResponse.Operator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string serial = 1;
  if (!this->_internal_serial().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serial().data(), static_cast<int>(this->_internal_serial().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taxprro.RroInfoResponse.Operator.serial");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serial(), target);
  }

  // int32 status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  // bool senior = 3;
  if (this->_internal_senior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_senior(), target);
  }

  // string isname = 4;
  if (!this->_internal_isname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_isname().data(), static_cast<int>(this->_internal_isname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taxprro.RroInfoResponse.Operator.isname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_isname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:taxprro.RroInfoResponse.Operator)
  return target;
}

size_t RroInfoResponse_Operator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:taxprro.RroInfoResponse.Operator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serial = 1;
  if (!this->_internal_serial().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serial());
  }

  // string isname = 4;
  if (!this->_internal_isname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_isname());
  }

  // int32 status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // bool senior = 3;
  if (this->_internal_senior() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RroInfoResponse_Operator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RroInfoResponse_Operator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RroInfoResponse_Operator::GetClassData() const { return &_class_data_; }

void RroInfoResponse_Operator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RroInfoResponse_Operator *>(to)->MergeFrom(
      static_cast<const RroInfoResponse_Operator &>(from));
}


void RroInfoResponse_Operator::MergeFrom(const RroInfoResponse_Operator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:taxprro.RroInfoResponse.Operator)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_serial().empty()) {
    _internal_set_serial(from._internal_serial());
  }
  if (!from._internal_isname().empty()) {
    _internal_set_isname(from._internal_isname());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_senior() != 0) {
    _internal_set_senior(from._internal_senior());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RroInfoResponse_Operator::CopyFrom(const RroInfoResponse_Operator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:taxprro.RroInfoResponse.Operator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RroInfoResponse_Operator::IsInitialized() const {
  return true;
}

void RroInfoResponse_Operator::InternalSwap(RroInfoResponse_Operator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serial_, GetArenaForAllocation(),
      &other->serial_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &isname_, GetArenaForAllocation(),
      &other->isname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RroInfoResponse_Operator, senior_)
      + sizeof(RroInfoResponse_Operator::senior_)
      - PROTOBUF_FIELD_OFFSET(RroInfoResponse_Operator, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RroInfoResponse_Operator::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tax_2eproto_getter, &descriptor_table_tax_2eproto_once,
      file_level_metadata_tax_2eproto[5]);
}

// ===================================================================

class RroInfoResponse::_Internal {
 public:
};

RroInfoResponse::RroInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  operators_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:taxprro.RroInfoResponse)
}
RroInfoResponse::RroInfoResponse(const RroInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      operators_(from.operators_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_signer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_signer().empty()) {
    last_signer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_signer(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  name_to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name_to().empty()) {
    name_to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name_to(), 
      GetArenaForAllocation());
  }
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_addr().empty()) {
    addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_addr(), 
      GetArenaForAllocation());
  }
  pn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pn().empty()) {
    pn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pn(), 
      GetArenaForAllocation());
  }
  tins_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tins().empty()) {
    tins_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tins(), 
      GetArenaForAllocation());
  }
  name_pay_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name_pay().empty()) {
    name_pay_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name_pay(), 
      GetArenaForAllocation());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&lnum_) -
    reinterpret_cast<char*>(&status_)) + sizeof(lnum_));
  // @@protoc_insertion_point(copy_constructor:taxprro.RroInfoResponse)
}

inline void RroInfoResponse::SharedCtor() {
last_signer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tins_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_pay_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lnum_) -
    reinterpret_cast<char*>(&status_)) + sizeof(lnum_));
}

RroInfoResponse::~RroInfoResponse() {
  // @@protoc_insertion_point(destructor:taxprro.RroInfoResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RroInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  last_signer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tins_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_pay_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RroInfoResponse::ArenaDtor(void* object) {
  RroInfoResponse* _this = reinterpret_cast< RroInfoResponse* >(object);
  (void)_this;
}
void RroInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RroInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RroInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:taxprro.RroInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operators_.Clear();
  last_signer_.ClearToEmpty();
  name_.ClearToEmpty();
  name_to_.ClearToEmpty();
  addr_.ClearToEmpty();
  pn_.ClearToEmpty();
  tins_.ClearToEmpty();
  name_pay_.ClearToEmpty();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lnum_) -
      reinterpret_cast<char*>(&status_)) + sizeof(lnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RroInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .taxprro.RroInfoResponse.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::taxprro::RroInfoResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      // int32 status_rro = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_rro_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool open_shift = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          open_shift_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool online = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_signer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_last_signer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "taxprro.RroInfoResponse.last_signer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "taxprro.RroInfoResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name_to = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_name_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "taxprro.RroInfoResponse.name_to"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string addr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "taxprro.RroInfoResponse.addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool single_tax = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          single_tax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool offline_allowed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          offline_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 add_num = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          add_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pn = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_pn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "taxprro.RroInfoResponse.pn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .taxprro.RroInfoResponse.Operator operators = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // string tins = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_tins();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "taxprro.RroInfoResponse.tins"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lnum = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          lnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name_pay = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_name_pay();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "taxprro.RroInfoResponse.name_pay"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RroInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:taxprro.RroInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .taxprro.RroInfoResponse.Status status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // int32 status_rro = 2;
  if (this->_internal_status_rro() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_status_rro(), target);
  }

  // bool open_shift = 3;
  if (this->_internal_open_shift() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_open_shift(), target);
  }

  // bool online = 4;
  if (this->_internal_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_online(), target);
  }

  // string last_signer = 5;
  if (!this->_internal_last_signer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_signer().data(), static_cast<int>(this->_internal_last_signer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taxprro.RroInfoResponse.last_signer");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_last_signer(), target);
  }

  // string name = 6;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taxprro.RroInfoResponse.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  // string name_to = 7;
  if (!this->_internal_name_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name_to().data(), static_cast<int>(this->_internal_name_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taxprro.RroInfoResponse.name_to");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_name_to(), target);
  }

  // string addr = 8;
  if (!this->_internal_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taxprro.RroInfoResponse.addr");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_addr(), target);
  }

  // bool single_tax = 9;
  if (this->_internal_single_tax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_single_tax(), target);
  }

  // bool offline_allowed = 10;
  if (this->_internal_offline_allowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_offline_allowed(), target);
  }

  // int32 add_num = 11;
  if (this->_internal_add_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_add_num(), target);
  }

  // string pn = 12;
  if (!this->_internal_pn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pn().data(), static_cast<int>(this->_internal_pn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taxprro.RroInfoResponse.pn");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_pn(), target);
  }

  // repeated .taxprro.RroInfoResponse.Operator operators = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_operators(i), target, stream);
  }

  // string tins = 14;
  if (!this->_internal_tins().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tins().data(), static_cast<int>(this->_internal_tins().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taxprro.RroInfoResponse.tins");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_tins(), target);
  }

  // int32 lnum = 15;
  if (this->_internal_lnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_lnum(), target);
  }

  // string name_pay = 16;
  if (!this->_internal_name_pay().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name_pay().data(), static_cast<int>(this->_internal_name_pay().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taxprro.RroInfoResponse.name_pay");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_name_pay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:taxprro.RroInfoResponse)
  return target;
}

size_t RroInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:taxprro.RroInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .taxprro.RroInfoResponse.Operator operators = 13;
  total_size += 1UL * this->_internal_operators_size();
  for (const auto& msg : this->operators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string last_signer = 5;
  if (!this->_internal_last_signer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_signer());
  }

  // string name = 6;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string name_to = 7;
  if (!this->_internal_name_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_to());
  }

  // string addr = 8;
  if (!this->_internal_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  // string pn = 12;
  if (!this->_internal_pn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pn());
  }

  // string tins = 14;
  if (!this->_internal_tins().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tins());
  }

  // string name_pay = 16;
  if (!this->_internal_name_pay().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_pay());
  }

  // .taxprro.RroInfoResponse.Status status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int32 status_rro = 2;
  if (this->_internal_status_rro() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status_rro());
  }

  // bool open_shift = 3;
  if (this->_internal_open_shift() != 0) {
    total_size += 1 + 1;
  }

  // bool online = 4;
  if (this->_internal_online() != 0) {
    total_size += 1 + 1;
  }

  // bool single_tax = 9;
  if (this->_internal_single_tax() != 0) {
    total_size += 1 + 1;
  }

  // bool offline_allowed = 10;
  if (this->_internal_offline_allowed() != 0) {
    total_size += 1 + 1;
  }

  // int32 add_num = 11;
  if (this->_internal_add_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_add_num());
  }

  // int32 lnum = 15;
  if (this->_internal_lnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RroInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RroInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RroInfoResponse::GetClassData() const { return &_class_data_; }

void RroInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RroInfoResponse *>(to)->MergeFrom(
      static_cast<const RroInfoResponse &>(from));
}


void RroInfoResponse::MergeFrom(const RroInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:taxprro.RroInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operators_.MergeFrom(from.operators_);
  if (!from._internal_last_signer().empty()) {
    _internal_set_last_signer(from._internal_last_signer());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_name_to().empty()) {
    _internal_set_name_to(from._internal_name_to());
  }
  if (!from._internal_addr().empty()) {
    _internal_set_addr(from._internal_addr());
  }
  if (!from._internal_pn().empty()) {
    _internal_set_pn(from._internal_pn());
  }
  if (!from._internal_tins().empty()) {
    _internal_set_tins(from._internal_tins());
  }
  if (!from._internal_name_pay().empty()) {
    _internal_set_name_pay(from._internal_name_pay());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_status_rro() != 0) {
    _internal_set_status_rro(from._internal_status_rro());
  }
  if (from._internal_open_shift() != 0) {
    _internal_set_open_shift(from._internal_open_shift());
  }
  if (from._internal_online() != 0) {
    _internal_set_online(from._internal_online());
  }
  if (from._internal_single_tax() != 0) {
    _internal_set_single_tax(from._internal_single_tax());
  }
  if (from._internal_offline_allowed() != 0) {
    _internal_set_offline_allowed(from._internal_offline_allowed());
  }
  if (from._internal_add_num() != 0) {
    _internal_set_add_num(from._internal_add_num());
  }
  if (from._internal_lnum() != 0) {
    _internal_set_lnum(from._internal_lnum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RroInfoResponse::CopyFrom(const RroInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:taxprro.RroInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RroInfoResponse::IsInitialized() const {
  return true;
}

void RroInfoResponse::InternalSwap(RroInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  operators_.InternalSwap(&other->operators_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_signer_, GetArenaForAllocation(),
      &other->last_signer_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_to_, GetArenaForAllocation(),
      &other->name_to_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &addr_, GetArenaForAllocation(),
      &other->addr_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pn_, GetArenaForAllocation(),
      &other->pn_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tins_, GetArenaForAllocation(),
      &other->tins_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_pay_, GetArenaForAllocation(),
      &other->name_pay_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RroInfoResponse, lnum_)
      + sizeof(RroInfoResponse::lnum_)
      - PROTOBUF_FIELD_OFFSET(RroInfoResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RroInfoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tax_2eproto_getter, &descriptor_table_tax_2eproto_once,
      file_level_metadata_tax_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace taxprro
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::taxprro::Check* Arena::CreateMaybeMessage< ::taxprro::Check >(Arena* arena) {
  return Arena::CreateMessageInternal< ::taxprro::Check >(arena);
}
template<> PROTOBUF_NOINLINE ::taxprro::CheckRequest* Arena::CreateMaybeMessage< ::taxprro::CheckRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::taxprro::CheckRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::taxprro::CheckRequestId* Arena::CreateMaybeMessage< ::taxprro::CheckRequestId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::taxprro::CheckRequestId >(arena);
}
template<> PROTOBUF_NOINLINE ::taxprro::CheckResponse* Arena::CreateMaybeMessage< ::taxprro::CheckResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::taxprro::CheckResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::taxprro::StatusResponse* Arena::CreateMaybeMessage< ::taxprro::StatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::taxprro::StatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::taxprro::RroInfoResponse_Operator* Arena::CreateMaybeMessage< ::taxprro::RroInfoResponse_Operator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::taxprro::RroInfoResponse_Operator >(arena);
}
template<> PROTOBUF_NOINLINE ::taxprro::RroInfoResponse* Arena::CreateMaybeMessage< ::taxprro::RroInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::taxprro::RroInfoResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
